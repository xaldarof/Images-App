// Generated by Dagger (https://dagger.dev).
package com.example.data.realization;

import com.example.data.cloud.abstraction.ImageDataSource;
import com.example.data.cloud.abstraction.ImageManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataRepositoryImpl_Factory implements Factory<DataRepositoryImpl> {
  private final Provider<ImageDataSource> imageDataSourceProvider;

  private final Provider<ImageManager> imageManagerProvider;

  public DataRepositoryImpl_Factory(Provider<ImageDataSource> imageDataSourceProvider,
      Provider<ImageManager> imageManagerProvider) {
    this.imageDataSourceProvider = imageDataSourceProvider;
    this.imageManagerProvider = imageManagerProvider;
  }

  @Override
  public DataRepositoryImpl get() {
    return newInstance(imageDataSourceProvider.get(), imageManagerProvider.get());
  }

  public static DataRepositoryImpl_Factory create(Provider<ImageDataSource> imageDataSourceProvider,
      Provider<ImageManager> imageManagerProvider) {
    return new DataRepositoryImpl_Factory(imageDataSourceProvider, imageManagerProvider);
  }

  public static DataRepositoryImpl newInstance(ImageDataSource imageDataSource,
      ImageManager imageManager) {
    return new DataRepositoryImpl(imageDataSource, imageManager);
  }
}
