// Generated by Dagger (https://dagger.dev).
package com.example.exampletaxi.vm;

import com.example.domain.DataRepository;
import com.example.exampletaxi.mappers.ImageMapperImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<DataRepository> repositoryProvider;

  private final Provider<ImageMapperImpl> mapperProvider;

  public MainViewModel_Factory(Provider<DataRepository> repositoryProvider,
      Provider<ImageMapperImpl> mapperProvider) {
    this.repositoryProvider = repositoryProvider;
    this.mapperProvider = mapperProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(repositoryProvider.get(), mapperProvider.get());
  }

  public static MainViewModel_Factory create(Provider<DataRepository> repositoryProvider,
      Provider<ImageMapperImpl> mapperProvider) {
    return new MainViewModel_Factory(repositoryProvider, mapperProvider);
  }

  public static MainViewModel newInstance(DataRepository repository, ImageMapperImpl mapper) {
    return new MainViewModel(repository, mapper);
  }
}
